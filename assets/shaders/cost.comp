//
// Cost Computation Shader Program (1/1)
// -------------------------------------
// Compute the cost of each universe.
//L
#version 450
precision mediump float;



//
// Invocation
// ----------
//  When jobs are dispatched to this shader, the workgroup sizes should be
//  specified as the following:
//    x = universe ID;
//    y = section ID, for each section in a universe.
// in uvec3 gl_GlobalInvocationID;
//L



//
// Local Invocation
// ----------------
//  These values are specialized at runtime.
layout(local_size_x=1, local_size_x_id=1) in;
layout(local_size_y=1, local_size_y_id=2) in;
layout(local_size_z=1, local_size_z_id=3) in;
// Constant ID are started from 1 because some Nvidia driver have problem
// starting from 0.
//
//  The index of local invocation is the index of each group of 4 pixels in a
//  row.
// in uint gl_LocalInvocationIndex;
//L



//
// Inputs
// ------
//  Real universe. Must have length of `NQUATER_PIXEL`.
layout(std430, binding=0) readonly
buffer real_univ_buf {
  vec4[] real_univ;
};
//  Simulated universes. Must have the same widths and heights as the real
//  universe. Should have length of `(NUNIV * NQUATER_PIXEL)`.
layout(std430, binding=1) readonly
buffer sim_univs_buf {
  vec4[] sim_univs;
};
//  Temporary shared buffer for sum calculation. Should have length of
//  `NPACK`.
layout(std430, binding=2) coherent
buffer sum_temp_buf {
  float[] sum_temp;
};
//L



//
// Output
// ------
//  Collection of cost calculated in each workgroup. Must have length
//  `NUNIV * NSEC` (no residual) or `NUNIV * (NSEC + 1)` (with residual).
layout(std430, binding=3)
buffer partial_costs_buf {
  float[] partial_costs;
};
//L



//
// Push Constants
// --------------
layout(std430, push_constant) uniform CostMeta {
  // Number of sections in a universe.
  uint NSEC_UNIV;
  // Number of groups of 4 pixels in each section, the same as the number of
  // local invocations;
  uint NPACK_SEC;
  // Number of groups of 4 pixels in each universe;
  uint NPACK_UNIV;
  // Offset from the beginning of each universe, in unit of section.
  uint SEC_OFFSET;
};
//L




void main() {
  uint univ = gl_WorkGroupID.x;
  uint section = gl_WorkGroupID.y;
  uint pack_pos = gl_LocalInvocationIndex;
  uint sec_offset = SEC_OFFSET + section;

  uint univ_pack_offset = univ * NPACK_UNIV;
  uint sec_pack_offset = sec_offset * NPACK_SEC;
  uint real_pack_offset = sec_pack_offset + pack_pos;
  uint sim_pack_offset = univ_pack_offset + real_pack_offset;
  uint output_offset = univ * NSEC_UNIV + sec_offset;

  // Sum up first step for all universes. Fill `sum_temp` with partial sums.
  vec4 diff4 = abs(real_univ[real_pack_offset] - sim_univs[sim_pack_offset]);
  vec2 diff2 = diff4.xy + diff4.zw;
  sum_temp[sim_pack_offset] = diff2.x + diff2.y;
  memoryBarrier();
  barrier();

  // Now `sum_temp` is filled with values. Its size for each universe remainder
  // is `NPACK_SEC`.
  for (uint s = NPACK_SEC; s > 1;) {
    uint half_s = s >> 1;
    // Keep the one in middle when `s` is an odd number.
    uint adjusted_half_s = half_s + (s & 1);
    if (pack_pos < half_s) {
      sum_temp[sim_pack_offset] += sum_temp[sim_pack_offset + adjusted_half_s];
      s = adjusted_half_s;
      memoryBarrier();
      barrier();
    } else {
      return;
    }
  }

  partial_costs[output_offset] = sum_temp[sim_pack_offset];
  return;
}
