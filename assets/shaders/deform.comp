//
// Deformation Shader Program (1/1)
// --------------------------------
//  In this shader stage, bacteria arrangement data will be modified to
//  represent deformations (as well as position changes).
//L
#version 450
precision mediump float;



//
// Invocation
// ----------
//  When jobs are dispatched to this shader, the workgroup sizes should be
//  specified as the following:
//    x = indices of deformation types;
//    y = indices of bacteria in *all universes*.
// in uvec3 gl_GlobalInvocationID;
//L



//
// Type Definitions
// ----------------
//  Specifications of deformation. Each is defined by the base (minimum) value,
//  the range of change, and the number of steps to be taken.
struct DeformSpecs {
  // Translation in x, y directions.
  vec2 translate;
  // Stretch coefficient.
  vec2 stretch;
  // Angle of rotation in radian.
  float rotate;
};
//  Bacterium descriptors.
struct Bacterium {
  // Center of the cell.
  vec2 pos;
  // Size (half length excluding the round tip, radius) of the bacterium.
  vec2 size;
  // Orientation of the cell, CCW from x-axis.
  float orient;
  // ID of universe the bacterium is in.
  int univ;
};
//L



//
// Uniform Variables
// -----------------
//  All combinations of deformation specs. Indexed in column-major order,
//  sequentially translation, rotation and stretch.
layout(std430, binding=0) readonly
buffer deform_specs_buf {
  DeformSpecs[] deform_specs;
};
//  Bacterium from all the universes. 
layout(std430, binding=1)
buffer bacs_buf {
  Bacterium[] bacs;
};
//  Bacterium from all the universes. This should as long as
//  `BACS_SIZE * DEFORM_SPECS_SIZE`.
layout(std430, binding=2)
buffer bacs_out_buf {
  Bacterium[] bacs_out;
};
//L



//
// Constants
// ---------
//  Number of deform specs.
layout(constant_id=0)
const uint DEFORM_SPECS_SIZE = 1;
//  Number of bacteria input.
layout(constant_id=1)
const uint BACS_SIZE = 1;
//L



void main() {
  uint deform_idx = gl_GlobalInvocationID.x;
  uint bac_idx = gl_GlobalInvocationID.y;

  DeformSpecs spec = deform_specs[deform_idx];
  Bacterium bac = bacs[bac_idx];

  bac.pos += spec.translate;
  bac.size *= spec.stretch;
  bac.orient += spec.rotate;
  bacs_out[bac_idx * BACS_SIZE + deform_idx] = bac;
}
